@charset "UTF-8";

/// 1. Configuration and helpers
/// ----
/// The abstract folder gathers all Sass tools and helpers across the project. Every Global variable,
/// Should be put here in here. The rule thumb for this folder is that is should not output a single line of CSS
/// When compiled on its own. These are nothing but Sass helpers.
///
/// @see https://sass-guidelin.es/#abstracts-folder

@import 'abstracts/variables';
@import 'abstracts/functions';
@import 'abstracts/mixins';

/// 2. Vendors
/// ----
/// Most projects will have a vendors/ folder containing all the CSS files from external libraries and frameworks.
/// Like Normalize, Bootstrap, JQueryUI, FancyCarouselSliderjQueryPowered, and so on.
/// Putting those aside in the same folder is a good way to say:
/// "Hey, this is not from me, not my code, Not my responsibility"
///
/// If you have to override a section of any vendor, I recommend you have an 8th folder called vendors-extensions/
/// in which you may have files named exactly after the vendors they overwrite. For instance 'vendors-extensions/_bootstrap.scss'
/// is a file containing all CSS rules intended to re-declare some of Bootstrap's default CSS. This is to avoid
/// Editing the vendor files themselves, which is generally not a good idea.
///
/// @see https://sass-guidelin.es/#vendors-folder

@import url('https://fonts.googleapis.com/css?family=Nunito');
@import '~bootstrap/scss/bootstrap';
@import 'vendor/datepicker';

/// 3. Base stuff
/// ----
/// The 'base/' folder holds what we might call the boilerplate code for the project. In there, you might find some
/// typography rules, and probably a stylesheet (tat i'm used to calling '_base.scss'), defining some standard
/// stylezs for commonly used HTML elements.
///
/// @see https://sass-guidelin.es/#base-folder

@import 'base/base';

/// 4. Layout-related sections
/// ----
/// The layout/ folder contains everything that takes part in laying out the site or application. This folder could
/// have stylesheets for the main parts of the site (header, footer, navigation, sidebar...), the grid system or even
/// CSS styles for all the forms.
///
/// @see https://sass-guidelin.es/#layout-folder

@import 'layout/footer';

/// 5. Components
/// ----
/// For small components, there is the 'components/' folder. While 'layout/' is macro (defining the global wireframe)
/// 'components/' is more focused on widgets. It contains all kind of specific modules like a slider, a loader, a widget,
/// and basically along those lines. There are usually a lot of files in components/ since the whole site/application
/// should be mostly composed of tiny modules.
///
/// @see https://sass-guidelin.es/#components-folder

@import 'components/icons';
@import 'components/dropdowns';
@import 'components/page-header';
@import 'components/forms';
@import 'components/list-group';
@import 'components/badges';
@import 'components/navbar';
@import 'components/stamps';
@import 'components/modals';

/// 6. Page-specific styles
/// ----
/// If you have page-specific styles, it is better to put them in a 'pages/' folder, in a file named after the page.
/// For instance, it's not uncommon to have specific styles for the home page hence the need for a '_home.scss' in file in 'pages/'.
///
/// Note - Depending on your deployment process, these file could be called on their own to avoid merging them with the
/// the others in the resulting stylesheet. It is really up to you.
///
/// @see https://sass-guidelin.es/#pages-folder

@import 'pages/announcements';
